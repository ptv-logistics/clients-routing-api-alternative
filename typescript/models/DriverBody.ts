/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers\' working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WorkLogbook } from './WorkLogbook';
import {
    WorkLogbookFromJSON,
    WorkLogbookFromJSONTyped,
    WorkLogbookToJSON,
} from './WorkLogbook';
import type { WorkingHoursPreset } from './WorkingHoursPreset';
import {
    WorkingHoursPresetFromJSON,
    WorkingHoursPresetFromJSONTyped,
    WorkingHoursPresetToJSON,
} from './WorkingHoursPreset';

/**
 * Options regarding the drivers' working hours and work logbook.
 * If no driver object with a working hours preset is passed with the request, working hours will be unlimited.
 * @export
 * @interface DriverBody
 */
export interface DriverBody {
    /**
     * 
     * @type {WorkingHoursPreset}
     * @memberof DriverBody
     */
    workingHoursPreset: WorkingHoursPreset;
    /**
     * 
     * @type {WorkLogbook}
     * @memberof DriverBody
     */
    workLogbook?: WorkLogbook;
    /**
     * If true, the time on a combined transport, e.g. on a ferry, can be used for recreation. 
     * That means that a break or a rest can be scheduled when traveling on a ferry or by rail.
     * As breaks and daily rests may be split to match the time of the combined transport, we recommend to additionally
     * request _COMBINED_TRANSPORT_EVENTS_ when _SCHEDULE_EVENTS_ or _SCHEDULE_EVENTS_WITH_DRIVING_ are requested.
     * @type {boolean}
     * @memberof DriverBody
     */
    useTimeOnCombinedTransportForRecreation?: boolean;
}



/**
 * Check if a given object implements the DriverBody interface.
 */
export function instanceOfDriverBody(value: object): value is DriverBody {
    if (!('workingHoursPreset' in value) || value['workingHoursPreset'] === undefined) return false;
    return true;
}

export function DriverBodyFromJSON(json: any): DriverBody {
    return DriverBodyFromJSONTyped(json, false);
}

export function DriverBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): DriverBody {
    if (json == null) {
        return json;
    }
    return {
        
        'workingHoursPreset': WorkingHoursPresetFromJSON(json['workingHoursPreset']),
        'workLogbook': json['workLogbook'] == null ? undefined : WorkLogbookFromJSON(json['workLogbook']),
        'useTimeOnCombinedTransportForRecreation': json['useTimeOnCombinedTransportForRecreation'] == null ? undefined : json['useTimeOnCombinedTransportForRecreation'],
    };
}

export function DriverBodyToJSON(value?: DriverBody | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'workingHoursPreset': WorkingHoursPresetToJSON(value['workingHoursPreset']),
        'workLogbook': WorkLogbookToJSON(value['workLogbook']),
        'useTimeOnCombinedTransportForRecreation': value['useTimeOnCombinedTransportForRecreation'],
    };
}

