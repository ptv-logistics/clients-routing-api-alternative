/*
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.35
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routing.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Gets or Sets LowEmissionZoneExemptions
 */
public enum LowEmissionZoneExemptions {
  
  BE_LAGE_EMISSIEZONE_ANTWERPEN("BE_LAGE_EMISSIEZONE_ANTWERPEN"),
  
  BE_LAGE_EMISSIEZONE_GENT("BE_LAGE_EMISSIEZONE_GENT"),
  
  BE_ZONE_BASSE_EMISSION_BRUXELLES("BE_ZONE_BASSE_EMISSION_BRUXELLES"),
  
  DK_AALBORG_MILJOZONE("DK_AALBORG_MILJOZONE"),
  
  DK_ARHUS_MILJOZONE("DK_ARHUS_MILJOZONE"),
  
  DK_FREDERIKSBERG_MILJOZONE("DK_FREDERIKSBERG_MILJOZONE"),
  
  DK_KOBENHAVN_MILJOZONE("DK_KOBENHAVN_MILJOZONE"),
  
  DK_ODENSE_MILJOZONE("DK_ODENSE_MILJOZONE"),
  
  FR_STRASBOURG_ZFE("FR_STRASBOURG_ZFE"),
  
  GB_ABERDEEN_LEZ("GB_ABERDEEN_LEZ"),
  
  GB_BATH_CAZ("GB_BATH_CAZ"),
  
  GB_BIRMINGHAM_CAZ("GB_BIRMINGHAM_CAZ"),
  
  GB_BRADFORD_CAZ("GB_BRADFORD_CAZ"),
  
  GB_BRISTOL_CAZ("GB_BRISTOL_CAZ"),
  
  GB_DUNDEE_LEZ("GB_DUNDEE_LEZ"),
  
  GB_EDINBURGH_LEZ("GB_EDINBURGH_LEZ"),
  
  GB_GLASGOW_LEZ("GB_GLASGOW_LEZ"),
  
  GB_LONDON_ULTRA_LOW_EMISSION_ZONE("GB_LONDON_ULTRA_LOW_EMISSION_ZONE"),
  
  GB_NEWCASTLE_CAZ("GB_NEWCASTLE_CAZ"),
  
  GB_PORTSMOUTH_CAZ("GB_PORTSMOUTH_CAZ"),
  
  GB_SHEFFIELD_CAZ("GB_SHEFFIELD_CAZ"),
  
  IT_MILANO_AREA_C("IT_MILANO_AREA_C"),
  
  IT_PALERMO_ZTL("IT_PALERMO_ZTL"),
  
  NL_AMSTERDAM_MILIEUZONE("NL_AMSTERDAM_MILIEUZONE"),
  
  NL_ARNHEM_MILIEUZONE("NL_ARNHEM_MILIEUZONE"),
  
  NL_BREDA_MILIEUZONE("NL_BREDA_MILIEUZONE"),
  
  NL_DELFT_MILIEUZONE("NL_DELFT_MILIEUZONE"),
  
  NL_DEN_HAAG_MILIEUZONE("NL_DEN_HAAG_MILIEUZONE"),
  
  NL_EINDHOVEN_MILIEUZONE("NL_EINDHOVEN_MILIEUZONE"),
  
  NL_HAARLEM_MILIEUZONE("NL_HAARLEM_MILIEUZONE"),
  
  NL_LEIDEN_MILIEUZONE("NL_LEIDEN_MILIEUZONE"),
  
  NL_MAASTRICHT_MILIEUZONE("NL_MAASTRICHT_MILIEUZONE"),
  
  NL_MAASVLAKTE_ROTTERDAM_MILIEUZONE("NL_MAASVLAKTE_ROTTERDAM_MILIEUZONE"),
  
  NL_RIJSWIJK_MILIEUZONE("NL_RIJSWIJK_MILIEUZONE"),
  
  NL_ROTTERDAM_MILIEUZONE("NL_ROTTERDAM_MILIEUZONE"),
  
  NL_S_GRAVENDIJKWAL_MILIEUZONE("NL_S_GRAVENDIJKWAL_MILIEUZONE"),
  
  NL_S_HERTOGENBOSCH_MILIEUZONE("NL_S_HERTOGENBOSCH_MILIEUZONE"),
  
  NL_TILBURG_MILIEUZONE("NL_TILBURG_MILIEUZONE"),
  
  NL_UTRECHT_MILIEUZONE("NL_UTRECHT_MILIEUZONE");

  private String value;

  LowEmissionZoneExemptions(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static LowEmissionZoneExemptions fromValue(String value) {
    for (LowEmissionZoneExemptions b : LowEmissionZoneExemptions.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    if (prefix == null) {
      prefix = "";
    }

    return String.format("%s=%s", prefix, this.toString());
  }

}

